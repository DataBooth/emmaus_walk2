# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/88_app.ipynb (unless otherwise specified).

__all__ = ['DATA_INFO', 'AUTHOR_INFO', 'APP_NAME', 'load_walk_data', 'calc_walk_stats', 'plot_walk', 'plot_entire_walk',
           'SideBar', 'app_sidebar', 'app_mainscreen', 'notebook_mainscreen', 'sb']

# Cell
import numpy as np
import pandas as pd
import datetime as dt
import streamlit as st
from streamlit_folium import folium_static
import folium
import os, io
import activityio as aio
from IPython.display import display
from dateutil.parser import parse
#import matplotlib


#from pandas_profiling import ProfileReport
#from streamlit_pandas_profiling import st_profile_report

# Cell
DATA_INFO = 'Health Fit / Apple Watch (Author)'
AUTHOR_INFO = 'AUTHOR: [Michael J. Booth](https://about.me/mjboothaus)'
APP_NAME = 'Emmaus Walking Mapping App'

# Cell

# TODO: use st.cache() and also look to pre-load and cache/feather data (or similar)
def load_walk_data(walk_name):
    FIT_FILE_PATH = '/Users/mjboothaus/iCloud/Data/HealthFit/'
    data_dir = FIT_FILE_PATH + walk_name[0:3] + '/'
    data_files = [file for file in os.listdir(data_dir) if file.endswith('.fit')]
    data_files = sorted(data_files)

    walk_data = []
    walk_date = []

    for iFile, file in enumerate(data_files):
        walk_data.append(pd.DataFrame(aio.read(data_dir + file)))
        walk_date.append(parse(file[0:17]))
    return walk_data, walk_date


def calc_walk_stats(walk_data):
    total_time = dt.timedelta(0)
    total_distance = 0

    for iHike, hike in enumerate(walk_data):
        total_time += hike.index.max()
        print(iHike+1, walk_date[iHike], hike.index.max(), hike['dist'].max()/1e3)
        total_distance += hike['dist'].max()
        total_distance = total_distance / 1e3

    start_coord = walk_data[0][['lat', 'lon']].iloc[0].tolist()
    end_coord = walk_data[-1][['lat', 'lon']].iloc[-1].tolist()
    return total_time, total_distance, start_coord, end_coord


def plot_walk(walk_df, map_handle, walk_colour, freq=100):
    points = []
    count = 0
    for index, row in walk_df.iterrows():
        count+=1
        if count%freq == 0:
            points.append((row['lat'], row['lon']))
            folium.PolyLine(points, color=walk_colour, weight=8).add_to(map_handle)


def plot_entire_walk(walk_data, map_handle):
    for iHike, hike in enumerate(walk_data):
        plot_walk(hike, map_handle, 'blue')

# Cell
class SideBar:
    datasource = DATA_INFO
    datasize = 0   # look to calculate this (in MB?) - TEST: Comment change
    author = AUTHOR_INFO
    title = 'Data details...'
    data_local = False
    start_date = dt.date.today()
    end_date = dt.date.today()
    selected_data = None
    walk_name = ''


def app_sidebar():
    WALK_NAME = ['B2M: Bondi to Manly', 'GNW: Great North Walk', 'GWW: Great West Walk']
    # WALK_SUBDIR_NAME = ['GNW', 'GWW', 'B2M']
    sb = SideBar()
    st.sidebar.markdown(sb.author)
    st.sidebar.markdown(sb.datasource)
    st.sidebar.info(sb.title)
    st.sidebar.markdown('Datasize: ' + str(sb.datasize))
    sb.walk_name = st.sidebar.selectbox('Choose a walk', WALK_NAME, 0)
    return sb

def app_mainscreen(APP_NAME, sb):
    st.title(APP_NAME)

    # Load walking data
    walk_data, walk_date = load_walk_data(sb.walk_name)

    # Folium mapping example: center on Sydney Opera House
    # m = folium.Map(location=[-33.85719805, 151.21512338473752], zoom_start=15)

    total_time, total_distance, start_coord, end_coord = calc_walk_stats(walk_data)

    map_handle = folium.Map(start_coord, zoom_start=13, detect_retina=True, control_scale=True)

    plot_entire_walk(walk_data, map_handle)

    map_handle.fit_bounds(map_handle.get_bounds())

    # add marker for Opera House
    #tooltip = "Sydney Opera House"
    #folium.Marker(
    #    [-33.85719805, 151.21512338473752], popup="Sydney Opera House", tooltip=tooltip
    #).add_to(m)

    # call to render Folium map in Streamlit

    st.write(sb.walk_name)
    st.write('Total time: ' + total_time)
    st.write('Total distance: ' + total_distance)

    folium_static(map_handle)

# Cell
def notebook_mainscreen(APP_NAME, sb):
    print(APP_NAME)

    # Load walking data
    walk_data, walk_date = load_walk_data(sb.walk_name)

    total_time, total_distance, start_coord, end_coord = calc_walk_stats(walk_data)

    map_handle = folium.Map(start_coord, zoom_start=13, detect_retina=True, control_scale=True)
    map_handle.fit_bounds(map_handle.get_bounds())

    print(sb.walk_name)
    print('Total time: ', total_time)
    print('Total distance: ', total_distance)

    return map_handle, walk_data, walk_date

# Cell
sb = app_sidebar()

#try:
    #app_mainscreen(APP_NAME, sb)
map_handle, walk_data, walk_date = notebook_mainscreen(APP_NAME, sb)
#except Exception as e:
#    st.write(e)
#    st.write('ERROR: Unable to download data')

# Cell
# TODOs:
#
# Setup drop-down to choose the specific walk to be mapped